version: '3.8'

services:
  # Redis for job queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Go API service
  api:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.api
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
    environment:
      - PORT=8080
      - REDIS_URL=redis:6379
      - UPLOAD_DIR=/app/uploads
      - RESULTS_DIR=/app/results
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python background processor
  processor:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.processor
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
    environment:
      - REDIS_URL=redis:6379
      - NUM_WORKERS=2
      - RESULTS_DIR=/app/results
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # React frontend with Nginx
  frontend:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.frontend
    ports:
      - "80:80"
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis-data: 